import java.io.*;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.*;
import hsa.*;
import java.applet.*;
import java.net.*;

// The "SlimeBusters" class.
public class SlimeBusters extends JFrame
{
    final int SCREEN_WIDTH = 600;
    final int SCREEN_HEIGHT = 600;

    // Font
    Font font1 = new Font ("Arial", Font.ITALIC, 20);

    // Menu
    boolean atMenu = true;
    Image menuScreen = new ImageIcon ("Images/menuscreen.gif").getImage ();
    boolean instructions = false;
    Image instructionScreen = new ImageIcon ("Images/instructions.gif").getImage ();
    boolean store = false;
    Image storeScreen = new ImageIcon ("Images/store.gif").getImage ();
    boolean bestiary = false;
    Image bestiaryScreen = new ImageIcon ("Images/bestiary.gif").getImage ();

    // Achievements
    boolean achievements = false;
    int[] achieved = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    Image achievementScreen = new ImageIcon ("Images/achievements.gif").getImage ();
    Image splatter = new ImageIcon ("Images/splatter.gif").getImage ();
    String[] achievementName = new String [20];
    String[] required = new String [20];
    int achievementCounter = 0;
    int achievementNumber = 0;
    boolean achievementInfo;

    // New game
    boolean newGame = false;

    // Hero
    final int heroSpawnX = SCREEN_WIDTH / 2;
    final int heroSpawnY = SCREEN_HEIGHT / 2;
    int heroX = heroSpawnX;
    int heroY = heroSpawnY;
    final int startingStamina = 400;
    int stamina = startingStamina;
    int baseMovementSpeed = 3;
    int movementSpeed = baseMovementSpeed;
    int movementCounter = 0;
    int swingCooldown = 0;
    boolean swing = false;

    // Cash money
    int bestSwing = 0;
    int combo = 0;
    int scoreToBeAdded = 0;
    int cash = 5000;
    int score = 0;

    // Mouse
    int mouseX, mouseY;

    // Background
    Image background = new ImageIcon ("Images/slimetube.gif").getImage ();

    // Images hero
    Image hero = new ImageIcon ("Images/hero0.gif").getImage ();

    // Slime information
    String[] slimes = {"greenSlime", "greenSlime", "greenSlime", "greenSlime", "greenSlime", "greenSlime", "greenSlime",
	"acidSlime", "acidSlime", "acidSlime", "stickySlime", "stickySlime", "stickySlime", "mediumSlime", "mediumSlime",
	"mediumSlime", "giantSlime", "sharpShooterSlime", "mutantSlime", "motherSlime"};
    int[] slimeX = new int [20];
    int[] slimeY = new int [20];
    int[] slimeType = {5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 15, 15, 15, 25, 25, 25, 50, 30, 100, 250};
    int[] slimeDirection = new int [20];
    int[] slimeMovementCounter = new int [20];
    int[] slimeSpeed = {3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 2, 2, 2, 8, 8, 8, 15, 3, 15, 20};


    Image currentSlime;

    // Slime abilities
    boolean inAcid = false;
    int acidDamage = 1;
    boolean inSticky = false;
    int slowSpeed = 10;

    // Items/Upgrades
    int currentBucket = 1;
    int currentSprint = 0;
    int currentSuit = 0;
    int currentMedicalKit = 0;
    Image bucket;
    Image medicalKit;
    int[] bucketPrice = {100, 200, 400, 800};
    int[] sprintPrice = {100, 175, 250, 325, 400};
    int[] suitPrice = {100, 200, 300, 400, 500};
    int[] medicalKitPrice = {150, 300, 450};
    int bucketX = heroX + hero.getWidth (null) - 10;
    int bucketY = heroY + hero.getHeight (null) - 3;
    int healCounter = 0;
    int healSpeed = 250;

    public SlimeBusters ()
    {
	super ("Slime Busters");

	// Location
	setLocation (100, 50);

	// Set up for the game
	Container contentPane = getContentPane ();
	contentPane.add (new DrawingPanel (), BorderLayout.CENTER);
    }


    // Inner class for the drawing area
    private class DrawingPanel extends JPanel
    {

	/** Constructs a new DrawingPanel object
	  */
	public DrawingPanel ()
	{
	    // Add mouse listeners  to the drawing panel
	    this.addMouseListener (new MouseHandler ());
	    this.addMouseMotionListener (new MouseMotionHandler ());

	    setPreferredSize (new Dimension (SCREEN_WIDTH, SCREEN_HEIGHT));
	    setResizable (false);

	    // Keyboard input
	    this.setFocusable (true);
	    this.addKeyListener (new KeyHandler ());
	    this.requestFocusInWindow ();
	}

	/** Swing the bucket, and capture slimes
	*/
	public void swingBucket (Graphics g)
	{
	    Rectangle bucketSwing = new Rectangle (bucketX, bucketY, bucket.getWidth (null), bucket.getHeight (null));
	    Rectangle[] slimeToCheck = new Rectangle [slimeX.length];

	    for (int i = 0 ; i < slimeType.length ; i++)
	    {
		currentSlime = new ImageIcon ("Images/" + slimes [i] + ".gif").getImage ();
		slimeToCheck [i] = new Rectangle (slimeX [i], slimeY [i], currentSlime.getWidth (null), currentSlime.getHeight (null));

		// Check collision between bucket and slime
		if (bucketSwing.intersects (slimeToCheck [i]))
		{
		    scoreToBeAdded += slimeType [i];
		    slimeReset (i);
		    combo++;
		    achievements (i);
		}
	    }

	    if (swingCooldown > 75)
	    {
		swingCooldown--;
		bucketX--;
	    }
	    if (swingCooldown > 0 && swingCooldown <= 75)
	    {
		swingCooldown--;
		bucketX++;
	    }
	    if (swingCooldown == 0)
	    {
		swing = false;
		cash += scoreToBeAdded * combo / 5;
		score += scoreToBeAdded * combo;

		if (scoreToBeAdded * combo > bestSwing)
		    bestSwing = scoreToBeAdded * combo;

		combo = 0;
		scoreToBeAdded = 0;
	    }
	}

	/** Move the images
	* @param image the image to move
	*/
	public void moveHero ()
	{
	    movementSpeed = baseMovementSpeed - currentSprint / 2;

	    // Follow cursor
	    if (!swing)
	    {
		if (movementCounter == movementSpeed)
		{
		    if (heroX + hero.getWidth (null) / 2 < mouseX && (heroX + hero.getWidth (null)) < SCREEN_WIDTH)
		    {
			heroX++;
		    }
		    else if (heroX + hero.getWidth (null) / 2 > mouseX && heroX > 0)
		    {
			heroX--;
		    }
		    if (heroY + hero.getHeight (null) / 2 < mouseY && (heroY + hero.getHeight (null)) < SCREEN_HEIGHT)
		    {
			heroY++;
		    }
		    else if (heroY + hero.getHeight (null) / 2 > mouseY && heroY > 0)
		    {
			heroY--;
		    }
		}

		// Slow down the players movement speed
		if (movementCounter < movementSpeed)
		    movementCounter++;
		else
		    movementCounter = 0;

		// Apply slow
		if (inSticky)
		    movementSpeed += 2;
		else
		    movementSpeed = baseMovementSpeed;

		// Match the bucket coordinates to the hero
		bucketX = heroX + hero.getWidth (null) - 10;
		bucketY = heroY + hero.getHeight (null) - 3;
	    }
	}

	/** the players current stamina
	*/
	public void updateStamina (Graphics g)
	{
	    if (inAcid)
		stamina--;

	    g.drawString (String.valueOf (stamina), SCREEN_WIDTH / 2 - 20, 30);
	    g.setColor (Color.red);
	    g.fillRect (100, 30, stamina, 5);

	    // Heal
	    if (stamina < 400 && currentMedicalKit > 0)
	    {
		if (healCounter < healSpeed - currentMedicalKit * 50)
		    healCounter++;
		else
		{
		    stamina += 1;
		    healCounter = 0;
		}
	    }
	}


	/** rotates an image
	*@param g the graphics
	*@param image the image to rotate
	*/
	public void rotation (Graphics g)
	{
	    // We need a Graphics2D object for rotate
	    Graphics2D g2D = (Graphics2D) g;

	    // Calculate the angle in relation to the mouse
	    double angle = Math.abs (Math.asin ((mouseY - (heroY + hero.getHeight (null) / 2)) /
			Math.sqrt ((mouseX - (heroX + hero.getWidth (null) / 2)) *
			    (mouseX - (heroX + hero.getWidth (null) / 2)) +
			    (mouseY - (heroY + hero.getHeight (null) / 2)) *
			    (mouseY - (heroY + hero.getHeight (null) / 2)))));

	    // Four basic angles
	    if (mouseX == heroX + hero.getWidth (null) / 2 && mouseY < heroY + hero.getHeight (null) / 2)
		angle = Math.PI;
	    else if (mouseX == heroX + hero.getWidth (null) / 2 && mouseY >= heroY + hero.getHeight (null) / 2)
		angle = 0;
	    else if (mouseY == heroY + hero.getHeight (null) / 2 && mouseX < heroX + hero.getWidth (null) / 2)
		angle = -1 * (Math.PI / 2);
	    else if (mouseY == heroY + hero.getHeight (null) / 2 && mouseX > heroX + hero.getWidth (null) / 2)
		angle = Math.PI / 2;

	    // Other angles
	    if (mouseY < heroY + hero.getHeight (null) / 2 && mouseX > heroX + hero.getWidth (null) / 2)
		angle += Math.PI / 2;
	    else if (mouseY < heroY + hero.getHeight (null) / 2 && mouseX < heroX + hero.getWidth (null) / 2)
		angle = -1 * angle - (Math.PI / 2);
	    else if (mouseY > heroY + hero.getHeight (null) / 2 && mouseX > heroX + hero.getWidth (null) / 2)
		angle = -1 * angle + (Math.PI / 2);
	    else if (mouseY > heroY + hero.getHeight (null) / 2 && mouseX < heroX + hero.getWidth (null) / 2)
		angle -= Math.PI / 2;

	    // Rotate the hero
	    g2D.rotate (-angle, heroX + hero.getWidth (null) / 2, heroY + hero.getHeight (null) / 2);
	    g2D.drawImage (hero, heroX, heroY, this);
	    g2D.drawImage (bucket, bucketX, bucketY, this);
	    g2D.rotate (angle, heroX + hero.getWidth (null) / 2, heroY + hero.getHeight (null) / 2);
	}

	public void slimeReset (int whichSlime)
	{
	    // Assign the direction that the slime will be moving (0 = left to right, 1 = right to left,
	    // 2 = up to down, 3 = down to up, 4 = follow player)
	    slimeDirection [whichSlime] = (int) (Math.random () * 5);

	    // Assign starting coordinates for slimes
	    if (slimeDirection [whichSlime] == 0 || slimeDirection [whichSlime] == 4)
	    {
		slimeX [whichSlime] = (int) (Math.random () * -200 - 100);
		slimeY [whichSlime] = (int) (Math.random () * 600);
	    }
	    else if (slimeDirection [whichSlime] == 1)
	    {
		slimeX [whichSlime] = (int) (Math.random () * 100 + 600);
		slimeY [whichSlime] = (int) (Math.random () * 600);
	    }
	    else if (slimeDirection [whichSlime] == 2)
	    {
		slimeY [whichSlime] = (int) (Math.random () * -200 - 100);
		slimeX [whichSlime] = (int) (Math.random () * 600);
	    }
	    else if (slimeDirection [whichSlime] == 3)
	    {
		slimeY [whichSlime] = (int) (Math.random () * 100 + 600);
		slimeX [whichSlime] = (int) (Math.random () * 600);
	    }
	}

	public void slimeAI (Graphics g)
	{
	    Rectangle heroSize = new Rectangle (heroX, heroY, hero.getWidth (null), hero.getHeight (null));
	    Rectangle[] slimeToCheck = new Rectangle [slimeX.length];

	    for (int i = 0 ; i < slimeType.length ; i++)
	    {
		currentSlime = new ImageIcon ("Images/" + slimes [i] + ".gif").getImage ();
		g.drawImage (currentSlime, slimeX [i], slimeY [i], null);
		slimeToCheck [i] = new Rectangle (slimeX [i], slimeY [i], currentSlime.getWidth (null), currentSlime.getHeight (null));
	    }

	    for (int i = 0 ; i < slimeType.length ; i++)
	    {
		// Movement of slimes
		if (slimeMovementCounter [i] == slimeSpeed [i] && !heroSize.intersects (slimeToCheck [i]))
		{
		    if (slimeDirection [i] == 0)
		    {
			if (slimeX [i] < 700)
			    slimeX [i]++;
			if (slimeX [i] >= 700)
			    slimeReset (i);
		    }
		    else if (slimeDirection [i] == 1)
		    {
			if (slimeX [i] > -100)
			    slimeX [i]--;
			if (slimeX [i] <= -100)
			    slimeReset (i);
		    }
		    else if (slimeDirection [i] == 2)
		    {
			if (slimeY [i] < 700)
			    slimeY [i]++;
			if (slimeY [i] >= 700)
			    slimeReset (i);
		    }
		    else if (slimeDirection [i] == 3)
		    {
			if (slimeY [i] > -100)
			    slimeY [i]--;
			if (slimeY [i] <= -100)
			    slimeReset (i);
		    }
		    else if (slimeDirection [i] == 4)
		    {
			if (heroX + (int) (Math.random () * 100) < slimeX [i])
			{
			    slimeX [i]--;
			}
			else if (heroX + (int) (Math.random () * 100) > slimeX [i])
			{
			    slimeX [i]++;
			}
			if (heroY + (int) (Math.random () * 100) < slimeY [i])
			{
			    slimeY [i]--;
			}
			else if (heroY + (int) (Math.random () * 100) > slimeY [i])
			{
			    slimeY [i]++;
			}
		    }

		    slimeMovementCounter [i] = 0;
		}
		else if (slimeMovementCounter [i] < slimeSpeed [i])
		    slimeMovementCounter [i]++;

		// The acid/sticky trails
		if (slimeType [i] == 10)
		{
		    g.setColor (Color.RED);
		    if (slimeDirection [i] == 0)
			g.fillRect (slimeX [i] - 485, slimeY [i], 500, 25);
		    if (slimeDirection [i] == 1)
			g.fillRect (slimeX [i] + 15, slimeY [i], 500, 25);
		}
		if (slimeType [i] == 15)
		{
		    g.setColor (Color.YELLOW);
		    g.fillRect (slimeX [i] + currentSlime.getWidth (null) / 2,
			    slimeY [i] - currentSlime.getHeight (null) / 2, 10, 10);
		}

		// Damage the hero if in contact
		if (heroSize.intersects (slimeToCheck [i]))
		    stamina -= (int) slimeType [i] / 10;
	    }
	}

	public void achievements (int whichSlime)
	{
	    if (score >= 100)
		achieved [0] = 1;
	    if (score >= 250)
		achieved [1] = 1;
	    if (score >= 500)
		achieved [2] = 1;
	    if (score >= 1000)
		achieved [3] = 1;
	    if (score >= 2000)
		achieved [4] = 1;

	    if (combo == 2)
		achieved [5] = 1;
	    if (combo == 3)
		achieved [6] = 1;
	    if (combo == 4)
		achieved [7] = 1;
	    if (combo == 5)
		achieved [8] = 1;

	    if (bestSwing >= 50)
		achieved [9] = 1;
	    if (bestSwing >= 100)
		achieved [10] = 1;
	    if (bestSwing >= 200)
		achieved [11] = 1;

	    if (slimeType [whichSlime] == 5)
		achieved [12] = 1;
	    if (slimeType [whichSlime] == 10)
		achieved [13] = 1;
	    if (slimeType [whichSlime] == 15)
		achieved [14] = 1;
	    if (slimeType [whichSlime] == 25)
		achieved [15] = 1;
	    if (slimeType [whichSlime] == 30)
		achieved [16] = 1;
	    if (slimeType [whichSlime] == 50)
		achieved [17] = 1;
	    if (slimeType [whichSlime] == 100)
		achieved [18] = 1;
	    if (slimeType [whichSlime] == 250)
		achieved [19] = 1;
	}

	/** Repaint the drawing panel
	  * @param g The Graphics context
	  */
	public void paintComponent (Graphics g)
	{
	    super.paintComponent (g);

	    if (atMenu)
	    {
		g.drawImage (menuScreen, 0, 0, null);
	    }

	    if (instructions)
	    {
		g.drawImage (instructionScreen, 0, 0, null);
	    }

	    if (store)
	    {
		g.drawImage (storeScreen, 0, 0, null);

		// Upgrades
		setFont (new Font ("Comic Sans MS", Font.BOLD, 20));
		g.drawString ("Bucket Upgrade     " + currentBucket, 50, 120);

		if (currentBucket <= 4)
		    g.drawString (" --> " + (currentBucket + 1) + "     $" + bucketPrice [currentBucket - 1] + "   BUY   ", 260, 120);
		else
		    g.drawString ("MAXED!", 300, 120);

		g.drawString ("Sprint Upgrade     " + currentSprint, 50, 220);

		if (currentSprint <= 4)
		    g.drawString (" --> " + (currentSprint + 1) + "     $" + sprintPrice [currentSprint] + "   BUY   ", 255, 220);
		else
		    g.drawString ("MAXED!", 300, 220);

		g.drawString ("Slime Suit Upgrade     " + currentSuit, 50, 320);

		if (currentSuit <= 4)
		    g.drawString (" --> " + (currentSuit + 1) + "     $" + suitPrice [currentSuit] + "   BUY   ", 295, 320);
		else
		    g.drawString ("MAXED!", 350, 320);

		g.drawString ("Medical Kit Upgrade     " + currentMedicalKit, 50, 420);

		if (currentMedicalKit <= 2)
		    g.drawString (" --> " + (currentMedicalKit + 1) + "     $" + medicalKitPrice [currentMedicalKit] + "   BUY   ", 310, 420);
		else
		    g.drawString ("MAXED!", 350, 420);

		g.drawString ("Cash: $" + String.valueOf (cash), 50, 500);
	    }

	    if (achievements)
	    {
		g.drawImage (achievementScreen, 0, 0, null);

		TextInputFile nameAndRequired = new TextInputFile ("Images/achievements.txt");

		for (int j = 1 ; j < 5 ; j++)
		    for (int i = 0 ; i < 5 ; i++)
		    {
			if (achieved [achievementCounter] == 0 && i <= 4)
			    g.drawImage (splatter, i * 110, j * 100, null);

			achievementName [achievementCounter] = nameAndRequired.readLine ();
			required [achievementCounter] = nameAndRequired.readLine ();

			achievementCounter++;
		    }

		achievementCounter = 0;

		if (achievementInfo)
		{
		    g.drawString (achievementName [achievementNumber], 20, 560);
		    setFont (font1);
		    g.drawString (required [achievementNumber], 20, 585);
		    achievementInfo = false;
		}
	    }
	    if (bestiary)
	    {
		g.drawImage (bestiaryScreen, 0, 0, null);
	    }

	    if (newGame)
	    {
		g.drawImage (background, 0, 0, this);

		// Draw medical kit
		if (currentMedicalKit > 0)
		    g.drawImage (medicalKit, 20, 20, this);

		// Score
		setFont (new Font ("Comic Sans MS", Font.BOLD, 36));
		g.drawString (String.valueOf (score), SCREEN_WIDTH - 120, SCREEN_HEIGHT - 50);

		rotation (g);
		moveHero ();

		if (swing)
		{
		    swingBucket (g);
		}

		updateStamina (g);

		// slimes
		slimeAI (g);
	    }
	} // paint component method
    }


    /** Monitors mouse movement over the game panel and responds
	    */
    private class MouseHandler extends MouseAdapter
    {
	/** Responds to mouse clicks
	* @param event the event created by the mouse click
	*/
	public void mousePressed (MouseEvent event)
	{
	    Point pressed = event.getPoint ();

	    // Menu options
	    if (pressed.x > 300 && pressed.x < 530 && pressed.y < 220 && pressed.y > 170 && atMenu == true)
	    {
		newGame = true;
		instructions = false;
		store = false;
		achievements = false;
		bestiary = false;
		atMenu = false;

		for (int i = 0 ; i < slimeType.length ; i++)
		{ // Assign the direction that the slime will be moving (0 = left to right, 1 = right to left,
		    // 2 = up to down, 3 = down to up, 4 = follow player)
		    slimeDirection [i] = (int) (Math.random () * 5);

		    // Assign starting coordinates for slimes
		    if (slimeDirection [i] == 0 || slimeDirection [i] == 4)
		    {
			slimeX [i] = (int) (Math.random () * -200 - 100);
			slimeY [i] = (int) (Math.random () * 600);
		    }
		    else if (slimeDirection [i] == 1)
		    {
			slimeX [i] = (int) (Math.random () * 100 + 600);
			slimeY [i] = (int) (Math.random () * 600);
		    }
		    else if (slimeDirection [i] == 2)
		    {
			slimeY [i] = (int) (Math.random () * -200 - 100);
			slimeX [i] = (int) (Math.random () * 600);
		    }
		    else if (slimeDirection [i] == 3)
		    {
			slimeY [i] = (int) (Math.random () * 100 + 600);
			slimeX [i] = (int) (Math.random () * 600);
		    }
		}

		hero = new ImageIcon ("Images/hero" + currentSuit + ".gif").getImage ();
		bucket = new ImageIcon ("Images/bucket" + currentBucket + ".gif").getImage ();

		if (currentMedicalKit > 0)
		    medicalKit = new ImageIcon ("Images/medicalKit" + currentMedicalKit + ".gif").getImage ();
	    }
	    else if (pressed.x > 330 && pressed.x < 550 && pressed.y < 285 && pressed.y > 230 && atMenu == true)
	    {
		instructions = true;
		atMenu = false;
	    }
	    else if (pressed.x > 330 && pressed.x < 440 && pressed.y < 340 && pressed.y > 290 && atMenu == true)
	    {
		store = true;
		atMenu = false;
	    }
	    else if (pressed.x > 330 && pressed.x < 580 && pressed.y < 400 && pressed.y > 350 && atMenu == true)
	    {
		achievements = true;
		atMenu = false;
	    }
	    else if (pressed.x > 330 && pressed.x < 470 && pressed.y < 450 && pressed.y > 415 && atMenu == true)
	    {
		bestiary = true;
		atMenu = false;
	    }

	    // Back buttons
	    if (pressed.x > 490 && pressed.x < 580 && pressed.y < 580 && pressed.y > 545 && instructions == true)
	    {
		instructions = false;
		atMenu = true;
	    }
	    if (pressed.x > 490 && pressed.x < 580 && pressed.y < 580 && pressed.y > 545 && store == true)
	    {
		store = false;
		atMenu = true;
	    }
	    if (pressed.x > 490 && pressed.x < 580 && pressed.y < 580 && pressed.y > 545 && achievements == true)
	    {
		achievements = false;
		atMenu = true;
	    }
	    if (pressed.x > 490 && pressed.x < 580 && pressed.y < 580 && pressed.y > 545 && bestiary == true)
	    {
		bestiary = false;
		atMenu = true;
	    }

	    // Buy Upgrades at store
	    if (store)
	    {
		if (pressed.x > 445 && pressed.x < 495 && pressed.y > 100 && pressed.y < 125 && currentBucket <= 4 && cash - bucketPrice [currentBucket - 1] >= 0)
		{
		    currentBucket++;
		    cash -= bucketPrice [currentBucket - 2];
		}
		else if (pressed.x > 440 && pressed.x < 490 && pressed.y > 200 && pressed.y < 225 && currentSprint <= 4 && cash - sprintPrice [currentSprint] >= 0)
		{
		    currentSprint++;
		    cash -= sprintPrice [currentSprint - 1];
		}
		else if (pressed.x > 480 && pressed.x < 530 && pressed.y > 300 && pressed.y < 325 && currentSuit <= 4 && cash - suitPrice [currentSuit] >= 0)
		{
		    currentSuit++;
		    cash -= suitPrice [currentSuit - 1];
		}
		else if (pressed.x > 490 && pressed.x < 540 && pressed.y > 400 && pressed.y < 425 && currentMedicalKit <= 2 && cash - medicalKitPrice [currentMedicalKit] >= 0)
		{
		    currentMedicalKit++;
		    cash -= medicalKitPrice [currentMedicalKit - 1];
		}
	    }

	    // Swing bucket
	    if (pressed.x > 0 && pressed.x < SCREEN_WIDTH && pressed.y > 0 &&
		    pressed.y < SCREEN_HEIGHT && newGame == true && swingCooldown == 0)
	    {
		swingCooldown = 150;
		swing = true;
	    }

	    repaint ();
	}
    }


    private class MouseMotionHandler extends MouseMotionAdapter
    {
	/** Responds to mouse-movement inputs
	*@paramevent   The event created by the mouse movement
	*/
	public void mouseMoved (MouseEvent event)
	{
	    Point mousePosition = event.getPoint ();
	    repaint (); //Repaint the screen to show any changes
	    mouseX = mousePosition.x;
	    mouseY = mousePosition.y;

	    if (achievements)
	    {
		for (int j = 1 ; j < 5 ; j++)
		    for (int i = 0 ; i < 5 ; i++)
		    {
			if (mouseX > i * 100 && mouseX < (i + 1) * 110 && mouseY > j * 100 && mouseY < (j + 1) * 100 && achieved [achievementCounter] == 1)
			{
			    achievementNumber = achievementCounter;
			    achievementInfo = true;
			}
			achievementCounter++;
		    }

		achievementCounter = 0;
	    }
	}
    }


    // Inner class to handle key events
    private class KeyHandler extends KeyAdapter
    {
	public void keyPressed (KeyEvent event)
	{
	    // Go back to menu if player pressed x
	    if (event.getKeyCode () == KeyEvent.VK_X)
	    {
		newGame = false;
		atMenu = true;
	    }
	    else if (event.getKeyCode () == KeyEvent.VK_SPACE && newGame)
	    {

	    }
	    // Repaint the screen after the change
	    repaint ();
	}
    }


    public static void main (String[] args)
    {
	SlimeBusters frame = new SlimeBusters ();
	frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
	frame.pack ();
	frame.setVisible (true);

    } // main method
} // SlimeBusters class


